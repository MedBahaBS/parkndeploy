on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Trigger only on semantic versioning tags
  workflow_dispatch: # Allow manual triggering as an option

env: 
  AZURE_RG_NAME: ${{ vars.PROJECT_NAME }}-rg-${{ vars.AZURE_RESOURCE_IDENTIFIER }}

jobs:
  deploy_infrastructure:
    if: startsWith(github.ref, 'refs/tags/v') # Ensure the workflow runs only for tags
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
    
    outputs:
      appServiceName: ${{ steps.bicep_deploy.outputs.appServiceName }}
      staticWebAppName: ${{ steps.bicep_deploy.outputs.staticWebAppName }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Login to Azure 
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true 

    - name: Create resource group if not exists      
      run: |
        az group show --name ${{ env.AZURE_RG_NAME }} ||
        az group create --name ${{ env.AZURE_RG_NAME }} --location ${{ secrets.AZURE_REGION }}

    - name: Deploy bicep
      id: bicep_deploy
      uses: azure/arm-deploy@v2
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        region: ${{ secrets.AZURE_REGION }}
        template: ./infrastructure/main.bicep
        parameters: project=${{ vars.PROJECT_NAME }} location=${{ secrets.AZURE_REGION }} swaLocation=${{ secrets.AZURE_SWA_REGION }} identifier=${{ vars.AZURE_RESOURCE_IDENTIFIER }}
        resourceGroupName: ${{ env.AZURE_RG_NAME }}

  deploy_backend:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: deploy_infrastructure
    environment: production
    permissions:
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Publish the app
      run: dotnet publish -c Release --property:PublishDir=publish
      working-directory: ./backend 

    - name: Login to Azure 
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
    - name: Deploy backend to App Service
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ needs.deploy_infrastructure.outputs.appServiceName }}
        package: ./backend/ParkNDeploy.Api/publish

  deploy_frontend:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: deploy_infrastructure
    environment: production
    permissions:
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build the app
      run: npm install && npm run build
      working-directory: ./frontend    

    - name: Login to Azure 
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
    - name: Get Static Web App deployment token
      run: |      
        SWA_DEPLOYMENT_TOKEN=$(az staticwebapp secrets list -n ${{ needs.deploy_infrastructure.outputs.staticWebAppName }} -o tsv --query properties.apiKey)
        echo SWA_DEPLOYMENT_TOKEN=$SWA_DEPLOYMENT_TOKEN >> $GITHUB_ENV

    - name: Deploy frontend to Static Web App
      uses: azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ env.SWA_DEPLOYMENT_TOKEN }}
        app_location: frontend/dist
        action: upload
        skip_app_build: true
        skip_api_build: true